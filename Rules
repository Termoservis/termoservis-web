#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

unless defined? LOADED_DEFAULT_CONFIG
  LOADED_DEFAULT_CONFIG = true
  require 'compass'
  Compass.add_project_configuration 'compass_config.rb'
end

compile '/static/*' do
end

compile '/helpers/header/*' do
  filter :erb
end

compile '/style/_*/' do
  # do not compile partials
end

compile '/style/*/' do
  filter :sass, Compass.sass_engine_options
end

compile '/robots.txt' do
  # do not compile robots.txt
end

compile '*' do
  if item[:extension] == 'html'
    filter :erb
    layout 'default'
  elsif item[:extension] == 'md'
    filter :kramdown
    layout 'default'
  elsif item[:extension] == 'css' or item[:extension] == 'min.css'
    # don’t filter stylesheets
  elsif item[:extension] == 'js' or item[:extension] == 'min.js'
    # don’t filter scripts
  elsif item.binary?
    # don’t filter binary items
  else
    filter :erb
    layout 'default'
  end
end

route '/static/*' do
  item.identifier[7..-2] + "." + item[:extension].gsub("min.", "")
end

route '/style/_*/' do
  # do not output partials, so return nil
  nil
end

route '/style/*/' do
  item.identifier.chop + '.css'
end

route '*' do
  if item[:extension] == 'css' or item[:extension] == 'min.css'
    # Write item with identifier /foo/ to /foo.css
    item.identifier.chop + '.css'
  elsif item[:extension] == 'js' or item[:extension] == 'min.js'
    # Write item with identifier /foo/ to /foo.js
    item.identifier.chop + '.js'
  elsif item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb