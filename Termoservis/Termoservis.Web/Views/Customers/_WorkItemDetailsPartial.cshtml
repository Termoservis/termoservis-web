@model Termoservis.Web.Models.Customer.WorkItemFormViewModel

@using (Html.BeginForm(Model.ActionName, "WorkItems", FormMethod.Post, new {@class = "col", role = "form", style = "background-color: rgb(249, 249, 249)"}))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new {@class = "text-danger"})
    @Html.HiddenFor(model => model.WorkItem.Id)
    @Html.HiddenFor(model => model.WorkItem.CustomerId)

    <div style="padding: 1em;">
        <div class="row">
            <div class="col-sm-12 col-md-4 col-lg-3">
                <div class="row form-group">
                    @Html.LabelFor(model => model.WorkItem.Type, htmlAttributes: new {@class = "col-form-label col-3"})
                    <div class="col-9">
                        @Html.EditorFor(model => model.WorkItem.Type, new {htmlAttributes = new {@class = "form-control", tabindex = "1"}})
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 col-md-4 col-lg-3">
                <div class="form-group row">
                    @Html.LabelFor(model => model.WorkItem.Date, htmlAttributes: new {@class = "col-form-label col-3"})
                    <div class="col-9">
                        @Html.TextBoxFor(model => model.WorkItem.Date, "{0:dd.MM.yyyy}", htmlAttributes: new {@class = "form-control workitem-edit-datepicker", tabindex = "2"})
                    </div>
                    @Html.ValidationMessageFor(model => model.WorkItem.Date)
                </div>
            </div>
            <div class="col-sm-12 col-md-4 col-lg-3">
                <div class="form-group row">
                    @Html.LabelFor(model => model.WorkItem.Price, htmlAttributes: new {@class = "col-form-label col-3"})
                    <div class="col-9">
                        @Html.EditorFor(model => model.WorkItem.Price, new {htmlAttributes = new {@class = "form-control workitem-edit-priceinput", tabindex = "3"}})
                    </div>
                    @Html.ValidationMessageFor(model => model.WorkItem.Price)
                </div>
            </div>
            <div class="col-sm-12 col-md-4 col-lg-3">
                <div class="form-group row">
                    @Html.LabelFor(model => model.WorkItem.Worker, htmlAttributes: new {@class = "col-form-label col-3"})
                    <div class="col-9">
                        <select class="form-control" id="WorkItem_WorkerId" name="WorkItem.WorkerId" tabindex="4">
                            @foreach (var worker in Model.AvailableWorkers.OrderBy(w => w.Disabled))
                            {
                                var isSelected = Model.WorkItem.WorkerId.HasValue && worker.Value == Model.WorkItem.WorkerId.Value.ToString();
                                <option value="@worker.Value" @(isSelected ? "selected='selected'" : "") @(worker.Disabled ? "disabled='disabled'" : "")>@worker.Text</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>
        
        <!--  Description and affected devices  -->
        <div class="form-group row">
            <div class="col-sm-12 col-md-8 col-lg-6">
                <div class="row">
                    @Html.LabelFor(model => model.WorkItem.Description, htmlAttributes: new {@class = "col-form-label col-sm-12"})
                </div>
                <div class="row">
                    <div class="col">
                        @Html.TextAreaFor(model => model.WorkItem.Description, htmlAttributes: new {@class = "form-control", rows = "4", tabindex = "5", style = "max-width: 510px;"})
                    </div>
                </div>
            </div>
            <div class="col-sm-12 col-md-4 col-lg-3">
                <div class="row">
                    @Html.LabelFor(model => model.WorkItem.AffectedDevices, htmlAttributes: new { @class = "col-form-label col-sm-12" })
                </div>
                <div class="row">
                    <div class="col">
                        <select class="form-control affected-devices-select select2-hidden-accessible" id="AffectedDevices" multiple="multiple" name="AffectedDevices" style="width: 100%" tabindex="6" aria-hidden="true">
                            @foreach (var device in Model.AvailableDevices)
                            {
                                <option value="@device.Value" @(Model.AffectedDevices.Select(ad => ad.ToString()).Contains(device.Value) ? "selected='selected'" : "")>@device.Text</option>
                            }
                        </select>
                    </div>
                </div>
            </div>
        </div>
        

        <div class="form-group row">
            <!--  Save button  -->
            <div class="col">

                <button class="btn btn-primary" click="$(this).closest('form').submit()" tabindex="7">
                    <i class="fa fa-floppy-o" aria-hidden="true"></i>
                    <span>&nbsp;Spremi</span>
                </button>

                <input type="submit" value="Submit" hidden="hidden"/>
            </div>

            <!-- Delete button -->
            <div class="col text-right">
                @Html.ActionLink(
                   "Obriši",
                   "Delete",
                   "WorkItems",
                   new { id = Model.WorkItem.Id },
                   new
                   {
                       @class="btn btn-secondary right",
                       onclick ="return confirm(\"Jeste li sigurni da zelite obrisati stavku '" + @Model.WorkItem.Description + "' s datumom " + Model.WorkItem.Date?.Date.ToString("dd.MM.yyyy") + "?\");"
                   })
            </div>
        </div>
    </div>
}

<script language="javascript" type="text/javascript">
    $(document).ready(function() {
        $(".affected-devices-select").select2();
    });

    $.validator.methods.range = function (value, element, param) {
            var globalizedValue = value.replace(",", ".");
            return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
    }

    $.validator.methods.number = function (value, element) {
            return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
    }
</script>
